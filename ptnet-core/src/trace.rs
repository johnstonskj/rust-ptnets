/*!
This module provides a trait that can be implemented to trace the execution of a net.

The tracer is intended to allow for a client to determine the intermediate activities within the
simulation between steps. This is useful for statistics, timing, and animation of nets as they are
executed.

*/

use crate::net::{Arc, Net, Place, Transition};
use crate::sim::{Marking, Simulation, Step, Tokens};
use crate::NodeId;

// ------------------------------------------------------------------------------------------------
// Public Types
// ------------------------------------------------------------------------------------------------

///
/// This trait is implemented to listen to events generated by the simulation as it executes.
///
/// 1. simulation started
/// 2. *for each step*:
///    1. step started
///    2. *for each firing transition*:
///       1. *for each input place*:
///          1. place updated
///       1. transition started
///       1. *on timed transition complete*
///       1. *for each output place*:
///          1. place updated
///       1. transition ended
///    1. step ended
/// 1. simulation ended
///
pub trait SimulationTracer {
    type Place: Place;
    type Transition: Transition;
    type Arc: Arc;
    type Net: Net<Place = Self::Place, Transition = Self::Transition, Arc = Self::Arc>;
    type Tokens: Tokens;
    type Marking: Marking<Tokens = Self::Tokens>;
    type Simulation: Simulation<
        Place = Self::Place,
        Transition = Self::Transition,
        Arc = Self::Arc,
        Tokens = Self::Tokens,
        Marking = Self::Marking,
    >;

    ///
    /// This event is generated when the simulation takes its first step, but before the
    /// `step_started` event.
    ///
    fn started(&self);

    ///
    /// This event is generated when the simulation takes a step. It is generated before any
    /// evaluation of the net marking.
    ///
    fn step_started(&self, step: Step);

    ///
    /// This is generated for any place that has had its tokens updated, either added or
    /// subtracted.
    ///
    fn place_updated(&self, place: NodeId);

    ///
    /// This is generated when a transition is fired. At this point all input tokens have been
    /// consumed from the preset but no output tokens have been transmitted.
    ///
    fn transition_started(&self, transition: NodeId);

    ///
    /// This is generated when a transition has been completed. At this point all output tokens
    /// have been transmitted to the postset.
    ///
    fn transition_ended(&self, transition: NodeId);

    ///
    /// This event is generated when the simulation completes a step. It is generated after all
    /// enabled transitions have fired.
    ///
    fn step_ended(&self, step: Step);

    ///
    /// This event is generated if, and when, the simulation determines that the net is
    /// terminated.
    ///
    fn ended(&self);
}

///
/// This trait provides for a simulation to add and remove a single tracer implementation.
///
/// Note that if you add a tracer after a simulation has started there is no expectation that
/// missed events will be delivered.
///
pub trait TraceableSimulation: Simulation {
    type SimulationTracer: SimulationTracer<
        Place = Self::Place,
        Transition = Self::Transition,
        Arc = Self::Arc,
        Tokens = Self::Tokens,
        Marking = Self::Marking,
        Simulation = Self,
    >;

    ///
    /// Add a tracer to this simulation.
    ///
    fn add_tracer(&mut self, tracer: Self::SimulationTracer);

    ///
    /// Remove any tracer associated with this simulation. If no tracer is associated this method
    /// does nothing.
    ///
    fn remove_tracer(&mut self);
}
