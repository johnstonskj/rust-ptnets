#+TITLE: Notes on Petri Nets
#+AUTHOR: Simon Johnston
#+EMAIL: johnstonskj@gmail.com
#+LANGUAGE: en
#+STARTUP: overview hidestars inlineimages entitiespretty
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="ptnets.css"/>

#+BEGIN_SRC emacs-lisp :exports none
(require 'ebnf-mode)
(require 'ob-dot) ;; builtin
#+END_SRC

A Petri net is a graphical and mathematical modeling tool. The concept of Petri nets has its origin in Carl Adam Petri's
dissertation "*Kommunikation mit Automaten*", submitted in 1962 to the faculty of Mathematics and Physics at the
Technische Universität Darmstadt, Germany.

Petri nets are a well-used tool for describing and studying systems that are characterized as being concurrent,
asynchronous, distributed, parallel, nondeterministic, and/or stochastic. As a graphical tool, Petri nets can be used as
a visual-communication aid similar to flow charts, block diagrams, and networks. In addition, tokens are used in these
nets to simulate the dynamic and concurrent activities of systems. As a mathematical tool, it is possible to set up
state equations, algebraic equations, and other mathematical models governing the behavior of systems.

* PTNet Modules

#+NAME: src:ptnet-model-packages
#+BEGIN_SRC plantuml :file ptnet-model-packages.svg
skinparam backgroundColor transparent
skinparam style strictuml
skinparam linetype polyline
skinparam nodesep 100

hide circle
hide empty members

package ptnet  {
    package net {}
    package sim {}
    sim ..> net: <<import>>

    package guarded {}
    guarded ..> net: <<import>>

    package inhibited {}
    inhibited ..> net: <<import>>

    package timed {}
    timed ..> net: <<import>>
    timed ..> sim: <<import>>

    package weighted {}
    weighted ..> net: <<import>>
    weighted ..> sim: <<import>>

}
#+END_SRC

#+NAME: fig:ptnet-model-packages
#+CAPTION: Core Modules
#+RESULTS: src:ptnet-model-packages
[[file:ptnet-model-packages.svg]]

** Common Types

#+NAME: src:ptnet-model-core
#+BEGIN_SRC plantuml :file ptnet-model-core.svg
skinparam backgroundColor transparent
skinparam style strictuml
skinparam linetype polyline
skinparam nodesep 100

hide circle
hide empty members

package ptnet  {
    class NodeId <<datatype>>

    interface HasIdentity {
        +id: NodeId
    }

    interface HasLabel {
        +label: Option<String>
    }

    interface HasDisplayLabel {
        display_label: Option<String>
    }
}
class boolean <<datatype>>
class unsigned <<datatype>>
class positive <<datatype>>
#+END_SRC

#+NAME: fig:ptnet-model-core
#+CAPTION: Common Types and Interfaces
#+RESULTS: src:ptnet-model-core
[[file:ptnet-model-core.svg]]

** Net Core Module

A Net $N$ consists of a tuple of *places* (the set $P$), *transitions* (the set $T$), and *arcs* (the set
$A$) that connect them. Note that arcs are historically known as *flow relations* and the set is named $F$.

$$\tag{Net} N = \left\langle P,T,A \right\rangle$$

The sets of places $P$ and transitions $T$ are disjoint.

$$ P \cap T = \emptyset$$

Arcs are a directed connection between a place/transition pair. We will use the notation $a_{src}$
for the source end and $a_{tgt}$ for the target end of an arc $a$.

$$\tag{Net Arc} A = \left(P \times T \right) \cup \left(T \times P \right)$$

*Input arcs* connect a source place to a target transition.

$$\tag{Input Arcs} a_{in} = \left\{ a \in A \mid a_{tgt} \in T \right\}$$
$$ a_{in}(t) = \left \{ a \in A \mid a_{tgt} = t \right \}$$

The set of *input places* for a transition $t$ is called its *preset* or ${}^{\bullet}t$.

$$\tag{Preset} {}^{\bullet}t = \left\{ p \in P \mid A(p,t) \right\}$$

*Output arcs* connect a source transition to a target place.

$$\tag{Output Arcs} a_{out} = \left\{ a \in A \mid a_{src} \in T \right\}$$
$$ a_{out}(t) = \left\{ a \in A \mid a_{src} = t \right\}$$

The set of *output places* for a transition $t$ is called its *postset* or $t^{\bullet}$.

$$\tag{Postset} t^{\bullet} = \left\{ p \in P \mid A(t,p) \right\}$$

#+NAME: src:ptnet-model-net
#+BEGIN_SRC plantuml :file ptnet-model-net.svg
skinparam backgroundColor transparent
skinparam style strictuml
skinparam linetype polyline
skinparam nodesep 100

hide empty members

package pnet {
    interface HasIdentity
    interface HasLabel
    package net {
        interface Node {}
        Node -down-|> HasIdentity
        Node -down-|> HasLabel

        interface Place {}
        Place -down-|> Node

        interface Transition {}
        Transition -down-|> Node

        interface Arc {
            source: NodeId
            target: NodeId
        }

        interface Net {}
        Net "1" *--> "*" Place
        Net "1" *--> "*" Transition
        Net "1" *--> "*" Arc

        interface NetBuilder <<builder>>
        interface PlaceBuilder <<builder>>
        interface TransitionBuilder <<builder>>
    }
}
#+END_SRC

#+NAME: fig:ptnet-model-net
#+CAPTION: Core Net Module
#+RESULTS: src:ptnet-model-net
[[file:ptnet-model-net.svg]]

*Textual Notation*

#+BEGIN_EXAMPLE
net net0 {
  place p1, p2
  transition t1
  arc p1 -> t1 -> p2   
}
#+END_EXAMPLE

*Graphical Notation*

#+NAME: src:ptnet-graph-core
#+BEGIN_SRC dot :file ptnet-graph-core.svg :exports results
strict digraph {
    id="net0";
    bgcolor="transparent";
    fontname="Helvetica Neue,Helvetica,Arial,sans-serif";
    nodesep=0.75;
    rankdir=LR;
    ranksep=0.75;

    // All place nodes.
    p1 [shape="circle"; label=""; xlabel="p1"];
    p2 [shape="circle"; label=""; xlabel="p2"];

    // All transition nodes.
    t1 [shape="rectangle"; style="filled"; fillcolor="darkgrey"; height=0.5; width=0.1; label=""; xlabel="t1"];

    // All arcs.
    p1 -> t1;
    t1 -> p2;
}
#+END_SRC

#+NAME: src:ptnet-graph-core
#+CAPTION: Core Net
#+RESULTS: src:ptnet-graph-core
[[file:ptnet-graph-core.svg]]

** Sim Core Module

Places can contain *tokens*; the current state of the modeled system (termed the *marking function* $M$) is given by the
number of tokens in each place.

$$\tag{Marking Function} M: P \mapsto \mathbb{N}$$

The initial marking of a net is noted as $M_{im}$ or more commonly $M_0$. A *marked net* extends the Net tuple
with a particular marking $M$.

$$\tag{Marked Net} N = \left\langle P,T,A,M \right\rangle$$

Transitions are active components. They model activities which can occur (the transition *fires*), thus changing the
state of the system (the marking of the Petri net). Transitions are only allowed to fire if they are *enabled*, which
means that all the preconditions for the activity must be fulfilled, i.e. there are enough tokens available in the input
places. For this check we use the undefined function $min$ which can only be defined as we define the type of tokens
later.

$$\tag{Enabled Function} enabled\left(t \in T \right) = \forall p \in {}^{\bullet}t: min\left(A\left(p,t\right)\right)$$

A net $N$ is therefore enabled *iff* any transition in $N$ is enabled.

$$enabled\left(N\right) \iff \exists t \in T: enabled\left(t\right)$$

When the transition fires, it removes tokens from its input places and adds some at all of its output places. The number
of tokens removed or added depends on the cardinality of each arc.

The firing of transitions in the marking $M_n$ results in the new marking $M_{n+1}$. The interactive firing of
transitions in subsequent markings is called the **token game**.

#+NAME: src:ptnet-model-sim
#+BEGIN_SRC plantuml :file ptnet-model-sim.svg
skinparam backgroundColor transparent
skinparam style strictuml
skinparam linetype polyline
skinparam nodesep 100

hide empty members

package pnet {
    package net {
        interface Net
    }
    package sim {
        interface Tokens {
            +value: Value
        }
        interface Value {
            {static} +default: Value
        }
        Tokens +-- Value
        interface Marking {
            +step: Step
            +marking(NodeId): Tokens
        }
        Marking ..> Tokens
        
        class Step <<datatype>>
        class Duration <<datatype>>

        interface Simulation {
            +step: Step
        }
        Simulation "1" o--> "1" Net
        Simulation "1" o--> "1" Marking
    }
}
#+END_SRC

#+NAME: fig:ptnet-model-sim
#+CAPTION: Sim Core Module
#+RESULTS: src:ptnet-model-sim
[[file:ptnet-model-sim.svg]]

*Textual Notation*

#+BEGIN_EXAMPLE
net net0 {
  place p1, p2, p3
  transition t1, t2
  arc p1 -> t1 -> p2 -> t2 -> p3

  initial marking {
    p1 = true
  } 
}
#+END_EXAMPLE

*Graphical Notation*

#+NAME: src:ptnet-graph-sim
#+BEGIN_SRC dot :file ptnet-graph-sim.svg :exports results
strict digraph {
    id="net0";
    bgcolor="transparent";
    fontname="Helvetica Neue,Helvetica,Arial,sans-serif";
    nodesep=0.75;
    rankdir=LR;
    ranksep=0.75;

    // All place nodes.
    p1 [shape="circle"; label="●"; xlabel="p1"];
    p2 [shape="circle"; color="darkgrey"; label=""; xlabel="p2"];
    p3 [shape="circle"; color="darkgrey"; label=""; xlabel="p3"];

    // All transition nodes.
    t1 [shape="rectangle"; style="filled"; color="darkgreen"; fillcolor="lightgreen"; height=0.5; width=0.1; label=""; xlabel="t1"];
    t2 [shape="rectangle"; style="filled"; color="darkgrey"; fillcolor="lightgrey"; height=0.5; width=0.1; label=""; xlabel="t2"];

    // All arcs.
    p1 -> t1;
    t1 -> p2;
    p2 -> t2;
    t2 -> p3;
}
#+END_SRC

#+NAME: src:ptnet-graph-sim
#+CAPTION: Basic Petri Net Components
#+RESULTS: src:ptnet-graph-sim
[[file:ptnet-graph-sim.svg]]

** Guarded Extension Module

#+NAME: src:ptnet-model-guarded
#+BEGIN_SRC plantuml :file ptnet-model-guarded.svg
skinparam backgroundColor transparent
skinparam style strictuml
skinparam linetype polyline
skinparam nodesep 100

hide empty members

package pnet {
    package net {
        interface Transition
    }
    package guarded {
        interface GuardedTransition {
            +is_guarded(): boolean
            +evaluate_guard(): boolean
        }
        GuardedTransition -|> Transition
    }
}
#+END_SRC

#+NAME: fig:ptnet-model-guarded
#+CAPTION: Guarded Transitions Module
#+RESULTS: src:ptnet-model-guarded
[[file:ptnet-model-guarded.svg]]

*Textual Notation*

TBD

*Graphical Notation*

TBD

** Inhibited Extension Module

#+NAME: src:ptnet-model-inhibited
#+BEGIN_SRC plantuml :file ptnet-model-inhibited.svg
skinparam backgroundColor transparent
skinparam style strictuml
skinparam linetype polyline
skinparam nodesep 100

hide empty members

package pnet {
    package net {
        interface Arc
    }
    package inhibited {
        interface InhibitorArc {}
        InhibitorArc -up-|> Arc
        interface ResetArc {}
        ResetArc -up-|> Arc
    }
}
#+END_SRC

#+NAME: fig:ptnet-model-inhibited
#+CAPTION: Inhibited and Reset Arcs Module
#+RESULTS: src:ptnet-model-inhibited
[[file:ptnet-model-inhibited.svg]]

*Textual Notation*

#+BEGIN_EXAMPLE
net net0 {
  place p1, p2
  transition t1
  arc p1 -inhibitor> t1
  arc t1 -reset> p2   
}
#+END_EXAMPLE

*Graphical Notation*

#+NAME: src:ptnet-graph-inhibited
#+BEGIN_SRC dot :file ptnet-graph-inhibited.svg :exports results
strict digraph {
    bgcolor="transparent";
    fontname="Helvetica Neue,Helvetica,Arial,sans-serif";
    nodesep=0.75;
    rankdir=LR;
    ranksep=0.75;

    // All place nodes.
    p1 [shape="circle"; label="●"; xlabel="p1"];
    p2 [shape="circle"; label=""; xlabel="p2"];

    // All transition nodes.
    t1 [shape="rectangle"; style="filled"; fillcolor="darkgrey"; height=0.5; width=0.1; label=""; xlabel="t1"];

    // All arcs.
    p1 -> t1 [arrowhead="odot"; label=<<I>inhibitor</I>>];
    t1 -> p2 [arrowhead="normalnormal"; arrowsize=0.66; label=<<I>reset</I>>];
}
#+END_SRC

#+NAME: fig:ptnet-graph-inhibited
#+CAPTION: Inhibited and Reset Arcs
#+RESULTS: src:ptnet-graph-inhibited
[[file:ptnet-graph-inhibited.svg]]

** Read-Only Arc Extension Module

#+NAME: src:ptnet-model-readonly
#+BEGIN_SRC plantuml :file ptnet-model-readonly.svg
skinparam backgroundColor transparent
skinparam style strictuml
skinparam linetype polyline
skinparam nodesep 100

hide empty members

package pnet {
    package net {
        interface Arc
    }
    package readonly {
        interface ReadOnlyArc {}
        ReadOnlyArc -right-|> Arc
    }
}
#+END_SRC

#+NAME: fig:ptnet-model-readonly
#+CAPTION: Read-Only Arcs Extension Module
#+RESULTS: src:ptnet-model-readonly
[[file:ptnet-model-readonly.svg]]

*Textual Notation*

#+BEGIN_EXAMPLE
net net0 {
  place p1, p2
  transition t1
  arc p1 -read- t1
  arc t1 -> p2   
}
#+END_EXAMPLE

*Graphical Notation*

#+NAME: src:ptnet-graph-readonly
#+BEGIN_SRC dot :file ptnet-graph-readonly.svg :exports results
strict digraph {
    bgcolor="transparent";
    fontname="Helvetica Neue,Helvetica,Arial,sans-serif";
    nodesep=0.75;
    rankdir=LR;
    ranksep=0.75;

    // All place nodes.
    p1 [shape="circle"; label="●"; xlabel="p1"];
    p2 [shape="circle"; label=""; xlabel="p2"];

    // All transition nodes.
    t1 [shape="rectangle"; style="filled"; fillcolor="darkgrey"; height=0.5; width=0.1; label=""; xlabel="t1"];

    // All arcs.
    p1 -> t1 [arrowhead="dot"; label=<<I>read-only</I>>];
    t1 -> p2;
}
#+END_SRC

#+NAME: src:ptnet-graph-readonly
#+CAPTION: Read-only Arcs Extension
#+RESULTS: src:ptnet-graph-readonly
[[file:ptnet-graph-readonly.svg]]

** Timed Extension Module

#+NAME: src:ptnet-model-timed
#+BEGIN_SRC plantuml :file ptnet-model-timed.svg
skinparam backgroundColor transparent
skinparam style strictuml
skinparam linetype polyline
skinparam nodesep 100

hide empty members

package pnet {
    package net {
        interface Transition
    }
    package sim {
        interface Duration
    }
    package timed {
        interface TimedTransition {
            +duration(): Duration
        }
        TimedTransition -up-|> Transition
        interface ImmediateTransition {}
        ImmediateTransition -up-|> TimedTransition
        interface RandomBoundedTransition {}
        RandomBoundedTransition -up-|> TimedTransition
    }
}
#+END_SRC

#+NAME: fig:ptnet-model-timed
#+CAPTION: Timed Transitions Extension Module
#+RESULTS: src:ptnet-model-timed
[[file:ptnet-model-timed.svg]]

*Textual Notation*

TBD

*Graphical Notation*

TBD

** Weighted Extension Module

#+NAME: src:ptnet-model-weighted
#+BEGIN_SRC plantuml :file ptnet-model-weighted.svg
skinparam backgroundColor transparent
skinparam style strictuml
skinparam linetype polyline
skinparam nodesep 100

hide empty members

package pnet {
    package net {
        interface Arc
        interface Place
    }
    package sim {
        interface Tokens
    }
    package weighted {
        interface WeightedArc {}
        WeightedArc -up-|> Arc
        WeightedArc o--> "weight" Tokens
        interface CapacityLimitedPlace {}
        CapacityLimitedPlace -up-|> Place
        CapacityLimitedPlace o--> "capacity" Tokens
    }
}
#+END_SRC

#+NAME: fig:ptnet-model-weighted
#+CAPTION: Weighted Arcs Extension Module
#+RESULTS: src:ptnet-model-weighted
[[file:ptnet-model-weighted.svg]]

*Textual Notation*

#+BEGIN_EXAMPLE
net net0 {
  place p1 {
    capacity = 2
  }
  place p2 {
    capacity = inf
  }
  
  transition t1
  
  arc p1 -> t1 {
    weight = 2
  }
  arc t1 -> p2 {
    weight = 1
  }
}
#+END_EXAMPLE

*Graphical Notation*

#+NAME: src:ptnet-graph-weighted
#+BEGIN_SRC dot :file ptnet-graph-weighted.svg :exports results
strict digraph {
    bgcolor="transparent";
    fontname="Helvetica Neue,Helvetica,Arial,sans-serif";
    nodesep=0.75;
    rankdir=LR;
    ranksep=0.75;

    // All place nodes.
    p1 [shape="circle"; label="|2|"; xlabel="p1"];
    p2 [shape="circle"; label=""; xlabel="p2"];

    // All transition nodes.
    t1 [shape="rectangle"; style="filled"; fillcolor="darkgrey"; height=0.5; width=0.1; label=""; xlabel="t1"];

    // All arcs.
    p1 -> t1 [arrowhead="none"; label="2"];
    t1 -> p2;
}
#+END_SRC

#+NAME: src:ptnet-graph-weighted
#+CAPTION: Weighted Arcs Extension
#+RESULTS: src:ptnet-graph-weighted
[[file:ptnet-graph-weighted.svg]]

* Elementary Nets

An Elementary net is a kind of place/transition net with the following characteristics.

- The token type is the boolean type \\(\mathbb{B}\\).
- Arcs do not have weights, or are modeled with fixed weights of 1.
- Places do not have capacity constraints, or are modeled with infinite \\(\infty\\) capacity.
- Transitions do not have duration values, or are modeled with a fixed duration of 0.
- Transitions do not have guard expressions, or are modeled with a fixed guard returning true \\(\top\\).
- No inhibitor, reset, or read-only arcs are allowed.

#+NAME: src:ptnet-model-elementary-net
#+BEGIN_SRC plantuml :file ptnet-model-elementary-net.svg
skinparam backgroundColor transparent skinparam style strictuml skinparam linetype polyline skinparam nodesep 100

hide circle
hide empty members

class bool <<datatype>>

package pnet_core {
    package net {
        interface Arc
        interface Place
        interface Transition
        interface Net
    }
    package sim {
        interface Tokens
        interface Value
        interface Marking
        interface Simulation
    }
}
package elementary {
    class SimpleArc {}
    SimpleArc .up.|> Arc

    class SimplePlace {}
    SimplePlace .up.|> Place

    class SimpleTransition {}
    SimpleTransition .up.|> Transition

    class ElementaryNet {}
    ElementaryNet .up.|> Net

    class Dot {}
    Dot .up.|> Tokens
    bool .up.|> Value

    class SimpleMarking {}
    SimpleMarking .up.|> Marking 
    
    class ElementarySimulation {}
    ElementarySimulation .up.|> Simulation
}
#+END_SRC

#+NAME: fig:ptnet-model-elementary-net
#+CAPTION: Elementary Net Module
#+RESULTS: src:ptnet-model-elementary-net
[[file:ptnet-model-elementary-net.svg]]

* Appendix: PTNet Language

PTNet is a source form that allows for compact representation of nets in a readable form.

** PTNet Grammar

#+BEGIN_SRC ebnf
file =
    net | marking ;

net =
    "net" name
    "{" property* defaults? tokens? node_or_arc* initial_marking? "}" ;

property =
    name "=" ( value | duration ) ;

defaults =
    "defaults" property_set ;

property_set =
     "{" property* "}" ;

tokens =
    "tokens" ( token_value "*" )? token_counter ;

token_value =
    unit_type
    | token_set_boolean
    | token_set_integer
    | token_set_positive
    | token_set_natural
    | token_set_string
    | tuple_type
    | set_type ;

token_counter =
    token_set_boolean
    | token_set_positive
    | token_set_natural
    | set_type ;

unit_type = "()" ;

token_set_boolean = "Boolean" ;

token_set_integer = "Integer" ; 

token_set_natural = "Natural" ; 

token_set_positive = "Positive" ; 

token_set_strings = "String" ; 

tuple_type =
    "⟨" tuple_member ( "," tuple_member )* "⟩"

tuple_member =
    name | new_token_set | new_token_tuple ;

set_type =
    "⟨" set_member ( "," set_member )* "⟩"

set_member =
    name | boolean | natural_positive | natural ;
    
node_or_arc =
    place | transition | arc | subnet ;

place =
    "place" name_list property_set? ;

transition =
    "transition" name_list property_set? ;

arc =
    "arc" arc_expression property_set? ;

arc_expression =
    arc_name_or_expression_list arc_symbol arc_name_or_expression_list ;

arc_name_or_expression_list =
    arc_name_or_expression ( "," arc_name_or_expression )* ;

arc_name_or_expression =
    name | "(" arc_expression ")" ;

arc_symbol = "->" | "-inhibitor>" | "-reset>" | "-read-" ;

subnet =
    "net" name "{" property* defaults? public_places? node_or_arc* "}" ;

public_places =
    "public" name_list ;

initial_marking =
    "initial" marking ;

marking =
    "marking" "{" property+ "}" ;

name =
    ( ASCII_LETTER | GREEK_LETTER ) ( ASCII_LETTER | GREEK_LETTER | "_")* ;

name_list =
    name ( "," name )* ;

value =
    boolean | number | quoted_string
    | set_value | multiset_value | tuple_value ;

bcfffvoolean =
    "true" | "false" ;

number =
    natural | "inf" ;

natural =
    "0" | natural_positive+

natural_positive =
    [1-9] ASCII_DIGIT*

quoted_string =
    "\"" [^\"]* "\""  ;

duration =
    "!" | natural_positive | ( "[" | "(" ) natural_positive "," natural_positive ( "]" | ")" ) ;

set_value =
    "{" value ( "," value )* "}" ;

multiset_value =
    "[" value ( "," value )* "]" ;

tuple_value =
    "⟨" value ( "," value )* "⟩" ;
#+END_SRC

* Appendix: GraphViz

** Net

#+NAME: src:graphviz-ex-net
#+BEGIN_SRC dot :file graphviz-ex-net.svg :exports code
strict digraph {
  id="{id}";
  label="{label}";
  bgcolor="transparent";
  compound=true;
  fontname="Helvetica Neue,Helvetica,Arial,sans-serif";
  nodesep={seperation};
  rankdir={rankdir};
  ranksep{seperation};
}
#+END_SRC

| Parameter  | Description                                                           | Default |
|------------+-----------------------------------------------------------------------+---------|
| ~id~         | use the prefix string "net" followed by a unique identifier (integer) | "net0"  |
| ~seperation~ | determine node/rank spacing                                           | 0.75    |
| ~rankdir~    | this is best as either "TD" for top-down, or "LR" for left-to-right   | "LR"    |
| ~label~      | a user-defined label string, /or/ nothing                               | ""      |

** Place

#+NAME: src:graphviz-ex-place
#+BEGIN_SRC dot :file graphviz-ex-place.svg :exports code
strict digraph {
  {id} [
    id="{id}";
    shape="circle";
    height={size};
    width={size};
    label="{marking}";
    xlabel="{label}";
  ];
}
#+END_SRC

| Parameter | Description                                                         | Default |
|-----------+---------------------------------------------------------------------+---------|
| ~id~        | use the prefix string "p" followed by a unique identifier (integer) | "p0"    |
| ~size~      | in this case the diameter of the place circle                       | 0.5     |
| ~marking~   | a string representation of the marking of this place                | ""      |
| ~label~     | a user-defined label string, /or/ the value of ~id~                     | ~{id}~    |

** Transition

#+NAME: src:graphviz-ex-transition
#+BEGIN_SRC dot :file graphviz-ex-transition.svg :exports code
strict digraph {
  {id} [
    id="{id}";
    shape="rectangle";
    style="filled";
    color="{line_color}";
    fillcolor="{fill_color}";
    height={size};
    width={=size*0.2};
    label="";
    xlabel="{label}";
  ];
}
#+END_SRC

| Parameter  | Description                                                               | Default    |
|------------+---------------------------------------------------------------------------+------------|
| ~id~         | use the prefix string "t" followed by a unique identifier (integer)       | "t0"       |
| ~line_color~ | the color of the border of the transition                                 | "black"    |
| ~fill_color~ | the color of the inside of the transition                                 | "darkgrey" |
| ~size~       | in this case the height of the transition, its width is 20% of the height | 0.5        |
| ~label~      | a user-defined label string, /or/ the value of ~id~                           | ~{id}~       |

For immediate transitions the size is specified as a fixed value, =0.02= to give a visually solid bar.

** Arc

#+NAME: src:graphviz-ex-arc
#+BEGIN_SRC dot :file graphviz-ex-arc.svg :exports code
strict digraph {
  {source} -> {target} [
    id="{source}_{target}";
    arrowhead="{arc_head}";
    arrowsize={scale}
    label="{display_label}";
  ];
}
#+END_SRC

| Parameter     | Description                                             | Default  |
|---------------+---------------------------------------------------------+----------|
| ~source~        | the ~id~ of the arc source                                | N/A      |
| ~target~        | the ~id~ of the arc target                                | N/A      |
| ~arc_head~      | the arrow head shape, different for different arc /types/ | "normal" |
| ~scale~         | a scaling factor for the arrow shape       | 1.0      |
| ~display_label~ | a display label for the arc                             | ""       |

For normal arcs the ~arc_head~ is "normal" which is a filled triangular head; for inhibitor arcs it is an open circle "odot", for
a reset arc it is two filled triangles "normalnormal" (like a fast-forward symbol) and a ~scale~ factor of 0.66. A
read-only arc is a filled circle "odot".

** Sub-net

#+NAME: src:graphviz-ex-subnet
#+BEGIN_SRC dot :file graphviz-ex-subnet.svg :exports code
strict digraph {
  subgraph cluster_{id} {
    label="{id}";
    margin={margin};
  }
}
#+END_SRC

| Parameter | Description                                                             | Default |
|-----------+-------------------------------------------------------------------------+---------|
| ~id~        | use the prefix string "net" followed by a unique identifier (integer)   | "net1"  |
| ~label~     | a user-defined label string, /or/ the value of ~id~                         | ~{id}~  |
| ~margin~    | the margin in px between the cluster boundary and the included elements | 24      |

** Colors

| Object     | State                | Line Color | Fill Color |
|------------+----------------------+-------------+--------------|
| Place      | Static               | "black"     | N/A          |
| Transition | Static               | "black"     | "darkgrey"   |
| Transition | Dynamic, Enabled     | "darkgreen" | "lightgreen" |
| Transition | Dynamic, Not Enabled | "darkgrey"  | "lightgrey"  |
| Arc        | Static               | "black"     | N/A          |
